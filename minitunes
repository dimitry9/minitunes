// DNI 1 X6312920H Dmitry Belyaevskiy
// DNI 2 53249509R Javier Palomares Crespo
#include <iostream>
#include <vector>
#include <fstream>
#include <sstream>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "Player.h"

using namespace std;
// DECLARACIONES DE TYPOS
typedef struct canciones
{
	int id;
	string title;
	string artist;
	string album;
	string genre;
	string url;
} Song;
typedef struct vectordecanciones
{
	vector<Song> songs;
	int idNextSong; // Cada vez que se anyada una cancion a la coleccion, incrementar idNextSong
} Collection;
typedef struct playlist
{
	vector<int> idSong;
} Playlist;
const int kTITLE = 30;
const int kARTIST = 60;
const int kALBUM = 60;
const int kGENRE = 30;
const int kURL = 255;
typedef struct cancionbinaria
{
	int id;
	char title[kTITLE];
	char artist[kARTIST];
	char album[kALBUM];
	char genre[kGENRE];
	char url[kURL];
} SongBin;
// fincion para inicializar los valores de la colecci??n
Collection createCollection()
{
	Collection collection;
	collection.idNextSong = 1;
	return collection;
}
// FUNCIONES DE LA PRACTICA 1
bool isSongInCollection(const Collection &collection, Song song) // Comprueba si la cancion ya esta en la colleccion
{
	bool incollection = false;
	for (unsigned x = 0; x < collection.songs.size() && incollection == false; x++)
	{
		if (collection.songs.at(x).title == song.title && collection.songs.at(x).artist == song.artist)
		{
			incollection = true;
		}
	}
	return incollection;
}
void printSong(Song song) //Imprime una cancion
{
	cout << song.id << " | " << song.title << " | " << song.artist
		<< " | " << song.album << " | " << song.genre;
}
Song demandSong() //Pregunta todos los datos de una cancion
{
	Song song;
	cin.get();
	cout << "Title: ";
	getline(cin, song.title);
	cout << "Artist: ";
	getline(cin, song.artist);
	cout << "Album: ";
	getline(cin, song.album);
	cout << "Genre: ";
	getline(cin, song.genre);
	cout << "Url: ";
	getline(cin, song.url);
	return song;
}
bool showCollection(const Collection &collection) //Imprime toda la colleccion
{
	bool hayresultado = false;
	string busqueda;
	cout << "Search: ";
	cin.ignore();
	getline(cin, busqueda);
	if (busqueda == "" || busqueda == " ")
	{
		if (collection.songs.size()>0)
		{
			for (unsigned x = 0; x<collection.songs.size(); x++)
			{
				printSong(collection.songs.at(x));
				hayresultado = true;
				cout << endl;
			}
		}
	}
	else
	for (unsigned x = 0; x < collection.songs.size(); x++)
	{
		if (collection.songs.at(x).title.find(busqueda) != string::npos || collection.songs.at(x).artist.find(busqueda) != string::npos ||
			collection.songs.at(x).album.find(busqueda) != string::npos || collection.songs.at(x).genre.find(busqueda) != string::npos)
		{
			printSong(collection.songs.at(x));
			hayresultado = true;
			cout << endl;
		}
	}
	if (!hayresultado)
	{
		cout << "No results" << endl;
	}
	return hayresultado;
}
bool addsong(Collection &collection) //Anyadir una cancion a la colleccion
{
	bool anyadida = false;
	Song song;
	song = demandSong();
	if (!isSongInCollection(collection, song))
	{

		song.id = collection.idNextSong;
		collection.songs.push_back(song);
		collection.idNextSong++;
		anyadida = true;
	}
	else
	{
		cout << "The song " << song.title << " is already in the collection" << endl;
	}
	return anyadida;

}
int findIdSong(Collection collection, int id) //Encuentra el ID de una cancion
{
	int posicion = -1;
	for (unsigned x = 0; x < collection.songs.size(); x++)
	{
		if (id == collection.songs.at(x).id)
		{
			posicion = x;
		}
	}
	return posicion;
}
void editsong(Collection &collection) //Edita una cancion
{
	int numcancion;
	if (showCollection(collection))
	{
		int pos;
		int opcion;
		cout << "Select song: ";
		cin >> numcancion;

		if (findIdSong(collection, numcancion) != -1)
		{
			pos = findIdSong(collection, numcancion);
			do
			{
				cout << "Edit (1-Title, 2-Artist, 3-Album, 4-Genre, 5-Url): ";
				cin >> opcion;
				cin.get();
				switch (opcion)
				{
				case 1:
					cout << "Title: ";
					getline(cin, collection.songs[pos].title);
					break;
				case 2:
					cout << "Artist: ";
					getline(cin, collection.songs[pos].artist);
					break;
				case 3:
					cout << "Album: ";
					getline(cin, collection.songs[pos].album);
					break;
				case 4:
					cout << "Genre: ";
					getline(cin, collection.songs[pos].genre);
					break;
				case 5:
					cout << "Url: ";
					getline(cin, collection.songs[pos].url);
					break;
				default:
					cout << "Error: Unknown option" << endl;
					break;
				}
			} while (opcion < 1 || opcion > 5);
		}
		else
		{
			cout << "Error: Unknown song " << numcancion << endl;
		}
	}

}
void deletesong(Collection &collection) // Elimina Una cancion
{
	int numcancion;
	int pos;
	char respuesta;
	if (showCollection(collection))
	{
		cout << "Select song: ";
		cin >> numcancion;
		if (findIdSong(collection, numcancion) != -1)
		{
			pos = findIdSong(collection, numcancion);
			cout << "Delete ";
			printSong(collection.songs[pos]);
			cout << "? (Y/N): ";
			cin >> respuesta;
			switch (respuesta)
			{
			case 'Y':
				collection.songs.erase(collection.songs.begin() + pos);
				break;
			default:
				cout << "Song not deleted" << endl;
				break;
			}
		}
		else
			cout << "Error: Unknown song " << numcancion << endl;

	}
}
// FUNCIONES DE LA PRACTICA 2
void printPlaylistSong(Song song)//Funcion que muestra cancion de playlist
{
	cout << song.id << ": " << song.title << " (" << song.artist << ")" << endl;
}
void printPlaylist(const Playlist &playlist, const Collection &collection, int position)//Funcion que mediante buble imprime las canciones que estan en la playlist llamando a la funcion printPlaylistSong
{
    unsigned pos=position;
	for (unsigned i = 0; i<playlist.idSong.size(); i++)
	{
		for (unsigned a = 0; a<collection.songs.size(); a++)
		{
			if (playlist.idSong.at(i) == collection.songs.at(a).id)
			{
			    if (pos==i)
			    {
			        cout << ">"; 
			    }
				printPlaylistSong(collection.songs.at(a));
			}
		}
	}
}
vector <string> demandPlaylistsongs()//Funcion auxiliar que pide las canciones separadas por espacio
//y las convierte en un vector de strings
{
	string cadenadecanciones;
	vector <string> cancionesseparadas;
	string cadenaauxiliar = "";
	cout << "Select songs (list separated by spaces): ";
	getline(cin, cadenadecanciones);
	if (cadenadecanciones != "")
	{
	//Mientras el for no encuentra un espacio " " va acumulando los numeros y cuando encuentra espacio hace un pushback del numero anterior cumulado
	for (unsigned a = 0; a < cadenadecanciones.size(); a++)
	{
		if (cadenadecanciones.at(a) != ' ')
		{
			cadenaauxiliar = cadenaauxiliar + cadenadecanciones.at(a);
		}
		else
		{
			if (cadenaauxiliar != " ")
			{
				cancionesseparadas.push_back(cadenaauxiliar);
				cadenaauxiliar = "";
			}
			else cadenaauxiliar = "";
		}
	}
	cancionesseparadas.push_back(cadenaauxiliar);
	}
	return cancionesseparadas;
}
void addSongsPlaylist(Playlist &playlist, const Collection &collection)//Funcion para anyadir canciones a la playlist
{
	if (collection.idNextSong == 1)
	{
		cout << "Empty collection" << endl;
	}
	else
	{
		showCollection(collection);
		vector <string> canciones;
		int numeroaux;
		canciones = demandPlaylistsongs();

		for (unsigned a = 0; a<canciones.size(); a++)
		{
			numeroaux = atoi(canciones.at(a).c_str());
			if (findIdSong(collection, numeroaux) != -1)
			{
				playlist.idSong.push_back(numeroaux);//Mediante este pushback se a?ade al playlist una id en formato numerico guaradado en numeroaux
			}
			else
			{
				cout << "Error: Unknown song " << numeroaux << endl;
			}
		}
	}
}
void removeSongsPlaylist(Playlist &playlist, const Collection &collection)//Funcion para eliminar canciones del playlist
{
	if (playlist.idSong.size() == 0)
	{
		cout << "Empty playlist" << endl;
	}
	else
	{
		bool encontrado = false;
		printPlaylist(playlist, collection, -1);
		vector <string> ids;
		int numeroaux;
		cin.get();
		ids=demandPlaylistsongs();

		for (unsigned a = 0; a<ids.size(); a++)
		{
				encontrado = false;
				numeroaux = atoi(ids.at(a).c_str());
				for (unsigned b = 0; b < playlist.idSong.size() && encontrado != true; b++)
				{
				if (numeroaux == playlist.idSong.at(b))
				{
					playlist.idSong.erase(playlist.idSong.begin() + b);//Borra las posiciones del vector que hayamos pedido borrar anteriormente
					encontrado = true;
				}

				}
				if (!encontrado)
				{
					cout << "Error: Song " << numeroaux << " not in playlist" << endl;
				}
		}
	}
}
void clearSongsPlaylist(Playlist &playlist)//Funcion que borra completamente la playlist
{
	char option;
	if (playlist.idSong.size() == 0)
	{
		cout << "Empty playlist" << endl;
	}
	else
	{
		cout << "Clear playlist? (Y/N): ";
		cin >> option;
		if (option == 'Y')
		{
			playlist.idSong.clear();
		}
	}
}
void managePlaylist(Playlist &playlist, const Collection &collection)//Menu para gestionar nuestra playlist
{
	char opcion;
	do
	{
		cout << "1- Add songs" << endl;
		cout << "2- Remove songs" << endl;
		cout << "3- Clear" << endl;
		cout << "q- Back to main menu" << endl;
		cout << "Option: ";
		cin >> opcion;
		switch (opcion)
		{
		case '1':
			addSongsPlaylist(playlist, collection);//Anyadir cancion
			break;
		case '2':
			removeSongsPlaylist(playlist, collection);//Elimina cancion
			break;
		case '3':
			clearSongsPlaylist(playlist);//Eliminar todos los datos de la playlist
			break;
		case 'q':
			break;
		default:
			cout << "Error: Unknown option" << endl;
		}
	} while (opcion != 'q');
}
string leerdatosJSON(string s, unsigned pos)
{
	string cadenaaux = "";
	bool cadenahecha = false;
	for (unsigned a = pos; a < s.size() && cadenahecha == false; a++)
	{
		if (s.at(a) == ':')
		{
			a +=2;
			while (s.at(a) != '\"')
			{
				cadenaaux = cadenaaux + s.at(a);
				a++;
			}
			if (s.at(a) == '\"')
			{
				cadenahecha = true;
			}
		}
	}
	return cadenaaux;
}
Song getSongFromJSONline(string JSONline)
{
	int pos;
	Song cancion;
	cancion.title = "cancionvacia";

	pos = JSONline.find("trackName");
	if (pos != -1)
	{
		cancion.title = leerdatosJSON(JSONline, pos);
	}
	pos = JSONline.find("collectionName");
	if (pos != -1)
	{
		cancion.album = leerdatosJSON(JSONline, pos);
	}
	pos = JSONline.find("artistName");
	if (pos != -1)
	{
		cancion.artist = leerdatosJSON(JSONline, pos);
	}
	pos = JSONline.find("primaryGenreName");
	if (pos != -1)
	{
		cancion.genre = leerdatosJSON(JSONline, pos);
	}
	pos = JSONline.find("previewUrl");
	if (pos != -1)
	{
		cancion.url = leerdatosJSON(JSONline, pos);
	}
	return (cancion);
}
bool importJSON(Collection &collection, string filename)//Funcion que importa canciones de un fichero
{
	bool resultado = false;
	ifstream fi;
	string linea;
	Song song;
	fi.open((filename).c_str(), ios::out);
	if (fi.is_open())
	{
		while (!fi.eof())
		{
			getline(fi, linea);
			song = getSongFromJSONline(linea);
			if (song.title != "cancionvacia")
			{
				if (!isSongInCollection(collection, song))
				{
					song.id = collection.idNextSong;
					collection.songs.push_back(song);
					collection.idNextSong++;
				}
				else
					cout << "The song " << song.title << " is already in the collection" << endl;
			}
		}
		fi.close();
	}
	else
	{
		cout << "Error opening file " << filename << endl;
	}
	return resultado;
}
void printXSPFSong(Song song, ofstream &f)//Funcion que imprime una cancion en un archivo
{
	f << "\t\t<track>" << endl;
	f << "\t\t\t<title>" << song.title << "</title>" << endl;
	f << "\t\t\t<creator>" << song.artist << "</creator>" << endl;
	f << "\t\t\t<album>" << song.album << "</album>" << endl;
	f << "\t\t\t<location>" << song.url << "/location>" << endl;
	f << "\t\t\t<meta rel=\"genre\">" << song.genre << "</meta>" << endl;
	f << "\t\t</track>" << endl;
}
bool saveXSPFPlaylist(const Playlist &playlist, const Collection &collection)//Funcion que imprime la playlist
{
	char fichero[30];
	cout << "Filename: ";
	cin >> fichero;
	ofstream fo;

	fo.open(fichero, ios::out);
	if (fo.is_open())
	{
		fo << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" << endl;//Cabecera del fichero
		fo << "<playlist version=\"1\" xmlns=\"http://xspf.org/ns/0/\">" << endl;
		fo << "\t<title>MiniTunes playlist</title>" << endl;
		fo << "\t<trackList>" << endl;

		//Bucle que imprime las caciones
		for (unsigned i = 0; i<playlist.idSong.size(); i++)
		{
			for (unsigned a = 0; a<collection.songs.size(); a++)
			{
				if (playlist.idSong.at(i) == collection.songs.at(a).id)
				{
					printXSPFSong(collection.songs.at(a), fo);
				}
			}
		}
		fo << "\t<trackList>" << endl;
		fo << "</playlist>" << endl;
		fo.close();
	}
	else
	{
		cout << "Error opening file " << fichero << endl;
	}
	return false;
}
SongBin songToBinary(const Song &song)
{
	SongBin binsong;
	binsong.id = song.id;
	strcpy(binsong.title, song.title.c_str());
	strcpy(binsong.artist, song.artist.c_str());
	strcpy(binsong.album, song.album.c_str());
	strcpy(binsong.genre, song.genre.c_str());
	strcpy(binsong.url, song.url.c_str());
	return binsong;
}
Song binaryToSong(const SongBin &songbin)
{
	Song song;
	song.id = songbin.id;
	song.title = songbin.title;
	song.artist = songbin.artist;
	song.album = songbin.album;
	song.genre = songbin.genre;
	song.url = songbin.url;

	return song;
}
bool writePlaylist(const Playlist &playlist, ofstream &f)
{
	int cantidadcanciones = playlist.idSong.size();
	f.write((const char *)&cantidadcanciones, sizeof(cantidadcanciones));
	for (unsigned i = 0; i < playlist.idSong.size(); i++)
	{
		f.write((const char *)&playlist.idSong.at(i), sizeof(playlist.idSong.at(i)));
	}
	return false;
}
bool writeCollection(const Collection &collection, ofstream &f)
{
	SongBin cancionbinaria;
	int candidadcancionescollection = collection.songs.size();
	f.write((const char *)&candidadcancionescollection, sizeof(candidadcancionescollection));
	for (unsigned i = 0; i < collection.songs.size(); i++ )
	{
		cancionbinaria = songToBinary(collection.songs.at(i));
		f.write((const char *)&cancionbinaria, sizeof(cancionbinaria));
	}
	return false;
}
bool saveData(const Collection &collection, const Playlist &playlist)//Funcion para guardar la coleccion en fichero binario
{
	if (collection.idNextSong == 1)
	{
		cout << "Empty collection" << endl;
	}
	else
	{
		ofstream fbe;
		fbe.open("minitunes.dat", ios::binary);
		if (fbe.is_open())
		{
			writePlaylist(playlist, fbe);
			writeCollection(collection, fbe);
			fbe.close();
		}
		else
		cout << "Error opening file minitunes.dat" << endl;
	}
	return false;
}
bool readPlaylist(Playlist &playlist, ifstream &f)
{
	int cantidaddecanciones;
	int idsong;
	f.read((char *)&cantidaddecanciones, sizeof(cantidaddecanciones));
	for (int i = 0; i < cantidaddecanciones; i++)
	{
		f.read((char *)&idsong, sizeof(idsong));
		playlist.idSong.push_back(idsong);
	}
	return false;
}
bool readCollection(Collection &collection, ifstream &f)//Funcion que lee la coleccion en binario y la pasa a string(no acabado)
{
	int cantidaddecanciones;
	Song song;
	SongBin cancionbinaria;
	f.read((char *)&cantidaddecanciones, sizeof(cantidaddecanciones));
	for (int i = 0; i < cantidaddecanciones; i++)
	{
		f.read((char *)&cancionbinaria, sizeof(cancionbinaria));
		song = binaryToSong(cancionbinaria);
		if (!isSongInCollection(collection, song))
		{
			song.id = collection.idNextSong;
			collection.songs.push_back(song);
			collection.idNextSong++;
		}
	}
	return false;
}
bool loadData(Collection &collection, Playlist &playlist)//Funcion que carga los datos de las canciones en binario
{
    if(collection.idNextSong==1)
    {
	ifstream fbe;
	fbe.open("minitunes.dat", ios::in | ios::binary);
    	if (fbe.is_open())
	    {
		    readPlaylist(playlist, fbe);
		    readCollection(collection, fbe);

		    fbe.close();
	    }
	    else
		    {
		    cout << "Error opening file minitunes.dat" << endl;
		    }
	return false;
    }
    else
    {
        char opcion;
        cout << "Delete previous collection? (Y/N):";
       	cin >> opcion;
		if (opcion == 'Y')
		{
			collection.songs.clear();
			collection.idNextSong=1;
			loadData(collection, playlist);
		}
       
    }
}

void comprobarplayplaylistmayor(int &posicion, Playlist playlist)
{
    
    if(posicion==playlist.idSong.size()-1){
        posicion = 0;
    }else{
        posicion=posicion+1;
    }
    
}

void comprobarplayplaylistmenor(int &posicion, Playlist playlist)
{
    
    if(posicion==0){
        posicion=playlist.idSong.size()-1;
    }else{
        posicion=posicion-1;
    }
}
string encontrarurl(int posicion, Playlist playlist, Collection collection)
{
    string url;
    for (unsigned i = 0; i<playlist.idSong.size(); i++)
	{
		for (unsigned a = 0; a<collection.songs.size(); a++)
		{
			if (playlist.idSong.at(i) == collection.songs.at(a).id)
			{
			    url = collection.songs.at(a).url;
			}
		}
	}
	return url;
}


void playPlaylist(const Playlist &playlist, const Collection &collection)
{
    Player player;//Declaracion variable de tipo player
    string url;
    
    if (playlist.idSong.size() == 0)
	{
	    cout<<"Empty playlist"<<endl;
	}
	else
	{

        int pos=0;
        char opcion;
        
        do{
    	url = encontrarurl(pos,playlist,collection);
    	printPlaylist(playlist, collection, pos);
    	cout << "Command: ";
    	playSong(url,player);
    	cin >> opcion;
    	
    	if(opcion!='p' && opcion!='s' && opcion!='a' && opcion!='q')
    	{
    	    //do{
                cout<<"Options:"<<endl;
                cout<<"p: Pause/resume"<<endl;
                cout<<"s: Next song"<<endl;
                cout<<"a: Previous song"<<endl;
                cout<<"q: Quit"<<endl;
                cin >> opcion;
                
    	    //}while (opcion=='p' || opcion=='s' || opcion=='a' || opcion=='q');
    	}
    	switch (opcion)
            {
                case 'p':
                    pauseResumeSong(player);
                    break;
                case 's':
                    comprobarplayplaylistmayor(pos,playlist);//comprobar
                    break;
                case 'a':
                    comprobarplayplaylistmenor(pos,playlist);//comprobar
                    break;
                case 'q':
                    ;
                    break;
            }
        }while(opcion!='q');
	
    }
}
void importdata(Collection &collection)//Funcion que pregunta por nombre del archivo desde el cual queremos importar datos y llama a la funcion importJSON
{
	cout << "Filename: ";
	cin.get();
	string archivo;
	getline(cin, archivo);
	importJSON(collection, archivo);
}
void exportplaylist(Collection &collection, Playlist &playlist)//Funcion que llama a la funcion saveXSPFPlaylist
{
	saveXSPFPlaylist(playlist, collection);
}
bool manageArguments(int argc, char *argv[], Collection &collection, Playlist &playlist)//Funcion que gestiona argumentos(no acabado)
{
	bool error = false;
	if (argc > 1)
	{
		for (int i = 1; i<argc; i++)
		{
			for (unsigned a = 0; a < 2; a++)
			{
				if (i + 1 < argc)
				{
					if (argv[i][a] == '-' && argv[i][a + 1] == 'd' && argv[i + 1][a] == '-' && argv[i + 1][a + 1] == 'i')
					{
						cout << "Syntax: ./minitunes [-d] [-i jsonfilename]";
						error = true;
					}
					else if (argv[i][a] == '-' && argv[i][a + 1] == 'i' && argv[i+1][a] == '-' && argv[i+1][a +1]=='d')
					{
					cout << "Syntax: ./minitunes [-d] [-i jsonfilename]";
					error= true;
					}
					else if (argv[i][a] == '-' && argv[i][a + 1] == 'd')
					{
						loadData(collection, playlist);
					}
					else if (argv[i][a] == '-' && argv[i][a + 1] == 'i')
					{
						if (i + 1 < argc)
						{
							string fichero = argv[i + 1];
							importJSON(collection, fichero);
						}

					}
				}
			}
		}
	}
	return error;
}
// EL MAIN
int main(int argc, char *argv[])
{
	Collection collection = createCollection();
	Playlist playlist;
	if (manageArguments(argc, argv, collection, playlist)==false)
	{
	char opcion = 'n';
	do
	{
		cout << "--------------------------------" << endl;
		cout << "----------- MiniTunes ----------" << endl;
		cout << "--------------------------------" << endl;
		cout << "1- Add song" << endl;
		cout << "2- Edit song" << endl;
		cout << "3- Delete song" << endl;
		cout << "4- Show collection" << endl;
		cout << "5- Manage playlist" << endl;
		cout << "6- Import iTunes JSON data" << endl;
		cout << "7- Export playlist to XSPF" << endl;
		cout << "8- Save data" << endl;
		cout << "9- Load data" << endl;
		cout << "0- Play playlist" << endl;
		cout << "q- Quit" << endl;
		cout << "Option: ";
		cin >> opcion;
		switch (opcion)
		{
		case '1': addsong(collection);
			break;
		case '2': editsong(collection);
			break;
		case '3': deletesong(collection);
			break;
		case '4': showCollection(collection);
			break;
		case '5': managePlaylist(playlist, collection);
			break;
		case '6': importdata(collection);
			break;
		case '7': exportplaylist(collection, playlist);
			break;
		case '8': saveData(collection, playlist);
			break;
		case '9': loadData(collection, playlist);
			break;
		case '0': playPlaylist(playlist, collection);
			break;
		case 'q':
			break;
		default: cout << "Error: Unknown option" << endl;
		}
	} while (opcion != 'q');
	return 0;
	}
}

